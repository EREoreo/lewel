'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Level2Chart from '../components/Level2Chart';
import { fetchStockData } from '../lib/yahooFinance';

export default function Level2Page() {
  const router = useRouter();
  
  // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
  const [ticker, setTicker] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // –ú–∞—Å—Å–æ–≤—ã–π —Ä–µ–∂–∏–º
  const [selectedFile, setSelectedFile] = useState(null);
  const [batchProcessing, setBatchProcessing] = useState(false);
  const [mode, setMode] = useState('single');

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedFile(file);
      setError('');
    }
  };

  const handleBatchProcess = async () => {
    if (!selectedFile || !startDate || !endDate) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã');
      return;
    }

    setBatchProcessing(true);
    setError('');

    try {
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('startDate', startDate);
      formData.append('endDate', endDate);
      formData.append('analysisType', 'level2');

      const response = await fetch('/api/batch', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `level2_results_${new Date().getTime()}.xlsx`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      alert('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–∫–∞—á–∞–Ω!');
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
    } finally {
      setBatchProcessing(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      if (!ticker || !startDate || !endDate) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      }

      if (new Date(startDate) >= new Date(endDate)) {
        throw new Error('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞');
      }

      const data = await fetchStockData(ticker, startDate, endDate);
      
      if (!data || data.length === 0) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞');
      }

      setChartData(data);
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
      setChartData(null);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —à–∞–ø–∫–∞ */}
      <div className="bg-white shadow-md border-b border-gray-200">
        <div className="flex gap-4 p-4">
          <button 
            onClick={() => router.push('/levelup')}
            className="px-8 py-3 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-full font-medium transition-colors"
          >
            Level Up
          </button>
          <button 
            onClick={() => router.push('/leveldown')}
            className="px-8 py-3 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-full font-medium transition-colors"
          >
            Level Down
          </button>
          <button 
            onClick={() => router.push('/level1')}
            className="px-8 py-3 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-full font-medium transition-colors"
          >
            Level 1
          </button>
          <button 
            className="px-8 py-3 bg-orange-500 text-white rounded-full font-medium shadow-lg"
          >
            Level 2 (Exp. Resistance)
          </button>
        </div>
      </div>

      <div className="flex">
        <div className="w-80 bg-[#9A7A7A] min-h-screen p-6">
          <h2 className="text-white text-xl font-semibold mb-4">Level 2 Analysis</h2>
          <p className="text-white/80 text-sm mb-6">–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è</p>
          
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
          <div className="flex gap-2 mb-6">
            <button
              onClick={() => setMode('single')}
              className={`flex-1 py-2 rounded-lg font-medium transition-colors ${
                mode === 'single'
                  ? 'bg-orange-500 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              –û–¥–∏–Ω —Ç–∏–∫–µ—Ä
            </button>
            <button
              onClick={() => setMode('batch')}
              className={`flex-1 py-2 rounded-lg font-medium transition-colors ${
                mode === 'batch'
                  ? 'bg-orange-500 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              –ú–∞—Å—Å–æ–≤–∞—è
            </button>
          </div>

          {mode === 'single' ? (
            /* –§–æ—Ä–º–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ */
            <form onSubmit={handleSubmit} className="space-y-4">
              <input
                type="text"
                placeholder="—Ç–∏–∫–µ—Ä"
                value={ticker}
                onChange={(e) => setTicker(e.target.value.toUpperCase())}
                className="w-full px-4 py-2 rounded-lg bg-gray-200 text-gray-800 placeholder-gray-600 focus:outline-none focus:ring-2 focus:ring-orange-400"
              />

              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                className="w-full px-4 py-2 rounded-lg bg-gray-200 text-gray-800 focus:outline-none focus:ring-2 focus:ring-orange-400"
              />

              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className="w-full px-4 py-2 rounded-lg bg-gray-200 text-gray-800 focus:outline-none focus:ring-2 focus:ring-orange-400"
              />

              <button
                type="submit"
                disabled={loading}
                className={`w-full py-2 rounded-lg text-white font-medium transition-colors ${
                  loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-orange-500 hover:bg-orange-600'
                }`}
              >
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫'}
              </button>
            </form>
          ) : (
            /* –§–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ */
            <div className="space-y-4">
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª
                </label>
                <input
                  type="file"
                  accept=".xlsx,.xls"
                  onChange={handleFileChange}
                  className="w-full px-4 py-2 rounded-lg bg-gray-200 text-gray-800 text-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100"
                />
                {selectedFile && (
                  <p className="text-white text-xs mt-2">
                    ‚úì {selectedFile.name}
                  </p>
                )}
              </div>

              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                className="w-full px-4 py-2 rounded-lg bg-gray-200 text-gray-800 focus:outline-none focus:ring-2 focus:ring-orange-400"
              />

              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className="w-full px-4 py-2 rounded-lg bg-gray-200 text-gray-800 focus:outline-none focus:ring-2 focus:ring-orange-400"
              />

              <button
                onClick={handleBatchProcess}
                disabled={batchProcessing}
                className={`w-full py-2 rounded-lg text-white font-medium transition-colors ${
                  batchProcessing ? 'bg-gray-400 cursor-not-allowed' : 'bg-red-600 hover:bg-red-700'
                }`}
              >
                {batchProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª'}
              </button>
            </div>
          )}

          {error && (
            <div className="mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg text-sm">
              {error}
            </div>
          )}

          <div className="mt-8 text-white/80 text-sm">
            <p className="font-medium mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:</p>
            <div className="space-y-1">
              {['INTC', 'BABA', 'COIN', 'RIVN'].map(t => (
                <button
                  key={t}
                  onClick={() => {
                    setMode('single');
                    setTicker(t);
                  }}
                  className="block hover:text-white transition-colors"
                >
                  ‚Ä¢ {t}
                </button>
              ))}
            </div>
          </div>

          {mode === 'batch' && (
            <div className="mt-8 p-4 bg-white/10 rounded-lg text-white/80 text-xs">
              <p className="font-semibold mb-2">üìù –§–æ—Ä–º–∞—Ç Excel:</p>
              <ul className="space-y-1 list-disc list-inside">
                <li>–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - —Ç–∏–∫–µ—Ä—ã</li>
                <li>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç</li>
                <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ</li>
              </ul>
            </div>
          )}

          <div className="mt-8 p-4 bg-white/10 rounded-lg text-white/80 text-xs">
            <p className="font-semibold mb-2">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Level 2:</p>
            <ul className="space-y-1 list-disc list-inside">
              <li>–ò–∑–æ–≥–Ω—É—Ç–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è</li>
              <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –≤ –¥–µ–Ω—å</li>
              <li>–ü—Ä–æ—Ö–æ–¥–∏—Ç –≤—ã—à–µ –≤—Å–µ—Ö —Å–≤–µ—á–µ–π</li>
              <li>–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ü–∏–π</li>
            </ul>
          </div>
        </div>

        <div className="flex-1 p-8">
          <div className="bg-white rounded-2xl shadow-xl p-6 min-h-[600px]">
            {!chartData && !loading && mode === 'single' && (
              <div className="flex items-center justify-center h-[500px]">
                <div className="text-center">
                  <p className="text-gray-500 text-lg">–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</p>
                  <p className="text-gray-400 text-sm mt-2">—Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è</p>
                </div>
              </div>
            )}

            {mode === 'batch' && (
              <div className="flex items-center justify-center h-[500px]">
                <div className="text-center max-w-md">
                  <div className="text-6xl mb-4">üìâ</div>
                  <h3 className="text-2xl font-bold text-gray-800 mb-4">–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Level 2</h3>
                  <p className="text-gray-600 mb-6">
                    –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö –∞–∫—Ü–∏–π.
                  </p>
                  <div className="bg-orange-50 p-4 rounded-lg text-sm text-left">
                    <p className="font-semibold text-orange-900 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:</p>
                    <ul className="space-y-1 text-orange-700">
                      <li>‚Ä¢ –¢–∏–∫–µ—Ä</li>
                      <li>‚Ä¢ –¶–µ–Ω–∞ —Ç–æ—á–∫–∏ 1</li>
                      <li>‚Ä¢ –¶–µ–Ω–∞ —Ç–æ—á–∫–∏ 2</li>
                      <li>‚Ä¢ –ù–æ–º–µ—Ä –¥–Ω—è 1</li>
                      <li>‚Ä¢ –ù–æ–º–µ—Ä –¥–Ω—è 2</li>
                      <li>‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –≤ –¥–µ–Ω—å</li>
                    </ul>
                  </div>
                </div>
              </div>
            )}

            {loading && (
              <div className="flex items-center justify-center h-[500px]">
                <div className="text-center">
                  <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
                  <p className="text-gray-500 mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
              </div>
            )}

            {chartData && !loading && mode === 'single' && (
              <>
                <div className="mb-4 flex items-center justify-between">
                  <h3 className="text-xl font-semibold text-gray-800">
                    {ticker} - –ì—Ä–∞—Ñ–∏–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                  </h3>
                  <div className="text-sm text-gray-600">
                    {startDate} - {endDate}
                  </div>
                </div>
                <Level2Chart data={chartData} ticker={ticker} />
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}